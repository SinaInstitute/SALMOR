/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inflectiongeneratorprompt;

import java.awt.Desktop;
import static java.awt.Desktop.getDesktop;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author rami
 */
public class InflectionGenFrame extends javax.swing.JFrame {

    /**
     * Creates new form InflectionGenFrame
     */
    public InflectionGenFrame() {
        initComponents();
        try {
            Toolkit kit = Toolkit.getDefaultToolkit();
            Image img = kit.createImage("./tree.png");
            setIconImage(img);
        } catch (Exception e){
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        genButton = new javax.swing.JButton();
        outFileButton = new javax.swing.JButton();
        inFileButton = new javax.swing.JButton();
        inputLabel = new javax.swing.JLabel();
        outputLabel = new javax.swing.JLabel();
        outputPlaceholder = new javax.swing.JLabel();
        inputPlaceholder = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SALMOR Inflectional Generator");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        resultsTextArea.setEditable(false);
        resultsTextArea.setColumns(20);
        resultsTextArea.setRows(5);
        jScrollPane1.setViewportView(resultsTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 102, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("File IO"));

        genButton.setText("Generate");
        genButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genButtonActionPerformed(evt);
            }
        });

        outFileButton.setText("Output File");
        outFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outFileButtonActionPerformed(evt);
            }
        });

        inFileButton.setText("Input File");
        inFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inFileButtonActionPerformed(evt);
            }
        });

        inputLabel.setText("Please press the \"Input File\" button select a file to generate from...");

        outputLabel.setText("Please press the \"Output File\" button select a file to generate into...");

        outputPlaceholder.setText("Output File");

        inputPlaceholder.setText("Input File");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(genButton))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(outputPlaceholder, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputPlaceholder, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outFileButton)
                    .addComponent(inFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inFileButton)
                    .addComponent(inputLabel)
                    .addComponent(inputPlaceholder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outFileButton)
                    .addComponent(outputLabel)
                    .addComponent(outputPlaceholder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(genButton)
                .addContainerGap())
        );

        jMenu2.setText("Help");

        jMenuItem1.setText("How to use SALMOR");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    File inputFile, outputFile, tempFile;
    boolean inSelected = false, outSelected = false;
    private void inFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inFileButtonActionPerformed
        try{
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
            chooser.showOpenDialog(this);
            inputFile = chooser.getSelectedFile();
            inputLabel.setText(inputFile.getName());
            inSelected = true;
        } catch (NullPointerException e){
            System.out.println("No input File Selected");
        }
    }//GEN-LAST:event_inFileButtonActionPerformed

    private void outFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outFileButtonActionPerformed
        try {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
            chooser.showSaveDialog(this);
            outputFile = chooser.getSelectedFile();
            outputLabel.setText(outputFile.getName());
            outSelected = true;
        } catch (NullPointerException e){
            System.out.println("No output File Selected");
        }
    }//GEN-LAST:event_outFileButtonActionPerformed

    private void genButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genButtonActionPerformed
        if(!(inSelected && outSelected)){
            return;
        }
        try {                                          
            System.out.println(System.getProperty("user.dir"));
            ProcessBuilder processBuilder = new ProcessBuilder();
            processBuilder.command("perl", System.getProperty("user.dir") +  "/script/ALMOR3gallSina.pl", "almor-s31.db");
            System.out.println(processBuilder.toString());
            
            processBuilder.redirectInput(inputFile);
            tempFile = new File("scratch");
            if(tempFile.exists()){
                tempFile.delete();
            }
            tempFile.createNewFile();
            processBuilder.redirectOutput(tempFile);
            genButton.setEnabled(false);
            genButton.setText("Starting");
            boolean success = true;
            try {
                Process process = processBuilder.start();
                System.out.println(process.waitFor());
            } catch (IOException ex) {
                Logger.getLogger(InflectionGenFrame.class.getName()).log(Level.SEVERE, null, ex);
                resultsTextArea.append("There is an issue in generating the inflections. Please try again\n\n");
                success = false;
            } catch (InterruptedException ex) {
                Logger.getLogger(InflectionGenFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(success){
                parseResults();
                tempFile.delete();
//                if(Desktop.isDesktopSupported()){
//                    Desktop desktop = Desktop.getDesktop();
//                    desktop.open(outputFile.getParentFile());
//                }
                resultsTextArea.append(new SimpleDateFormat("h:mm:s a").format(Calendar.getInstance().getTime()) + "\tFile " + outputFile.getName() + " created.\n\n");
                
            }
            genButton.setText("Generate");
            genButton.setEnabled(true);
        } catch (IOException ex) {
            Logger.getLogger(InflectionGenFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_genButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
//        new AboutSalmor().setVisible(true);
        Desktop desktop = getDesktop();
        try {
            URI uri = new URI("https://docs.google.com/document/d/1JrOy6p-bi12A_wh_osnI83Tas7su3zXSnOdOZcMC914/edit?usp=sharing");
             desktop.browse(uri);
        } catch (URISyntaxException | IOException ex) {
            Logger.getLogger(InflectionGenFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
public void parseResults(){
        long counter = 1;
        try {
            FileOutputStream fileOutputStream;
            OutputStreamWriter outputStreamWriter;
            BufferedWriter bufferedWriter;
            System.out.println("tempFile size: " + tempFile.length());
            try (FileInputStream fileInputStream = new FileInputStream(tempFile);
                    InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, "utf-8");
                    BufferedReader bufferedReader = new BufferedReader(inputStreamReader)) {
                fileOutputStream = new FileOutputStream(outputFile);
                outputStreamWriter = new OutputStreamWriter(fileOutputStream);
                bufferedWriter = new BufferedWriter(outputStreamWriter);
                String temp, stem, outLine = "", stemTag;
                String[] fields, wordDivided, posDivided, prefixPOS, suffixPOS;
//                                    System.out.println("in");
                bufferedWriter.append("Lemma\tCritera_Matches\tWord\tPre_Stem_Suff\tPre1\tPre2\tPre3\tPre4"
                        + "\tPre5\tPre6\tStem\tSuff1\tSuff2\tSuff3\tSuff4\tSuff5\tSuff6\tStem_Category\n");
                while((temp = bufferedReader.readLine()) != null){
//                    System.out.println("r");
                    String prefixPrint = "", suffixPrint = "";
                    fields = temp.split("\t");
                    if(fields.length == 6){
                        wordDivided = fields[3].split("-_-_-");
//                        prefixOrig = wordDivided[0];
                        stem = wordDivided[1];
//                        suffixOrig = wordDivided[2];
                        
                        posDivided = fields[4].split("-_-_-");
                        prefixPOS = posDivided[0].split("\\+");
                        stemTag = getStemTag(posDivided[1]);
                        if(posDivided.length == 3){
                            suffixPOS = posDivided[2].split("\\+");
                        } else {
                            suffixPOS = new String[]{""};
                        }
                        prefixPrint = divvyPOS(prefixPOS);
                        suffixPrint = divvyPOS(suffixPOS);
                        
                        outLine = fields[0]+"\t"+fields[1]+"\t"+fields[2]+"\t"+fields[3]+"\t"+prefixPrint+stem+"\t"+stemTag+"\t"+suffixPrint+"\t"+fields[5];
                        bufferedWriter.append(outLine.trim() + "\n" );
                        counter++;
                    } else if(fields.length == 6){
                        
                    } else {
                        System.err.print("Unanticipated field length");
                    }
                }
            }
            System.out.println("Parsed lines: " + counter);
            bufferedWriter.flush();
            bufferedWriter.close();
//            outputStreamWriter.flush();
            outputStreamWriter.close();
//            fileOutputStream.flush();
            fileOutputStream.close();
            
        } catch (IOException | ArrayIndexOutOfBoundsException ex) {
            System.out.println("Error at line: " + counter);
            Logger.getLogger(InflectionGenFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private String divvyPOS(String[] in){
        String result = "";
        for (String prefixPOS1 : in) {
            result += prefixPOS1.replace("/", "\t")+"\t";
        }
        int start = in.length;
        if(in[0].length() < 1) result += "\t";
        
        for(int i = start; i < 6; i++){
            result += "\t\t";
        }
        
        return result;
    }
    
    private String getStemTag(String in){
        String stemTag = "";
        String[] parts = in.split("\\+");
        for(String parts1 : parts){
            stemTag += parts1.split("/")[1] + " ";
        }
        return stemTag.trim().replace(" ", "+");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("GTK+".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
//            javax.swing.UIManager.setLookAndFeel("it.unitn.ing.swing.plaf.macos.MacOSLookAndFeel");
//            if ("GTK look and feel".equals(javax.swing.UIManager.getLookAndFeel().getName())){
//                javax.swing.UIManager.put("FileChooserUI", "eu.kostia.gtkjfilechooser.ui.GtkFileChooserUI");
//            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InflectionGenFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InflectionGenFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton genButton;
    private javax.swing.JButton inFileButton;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JLabel inputPlaceholder;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton outFileButton;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JLabel outputPlaceholder;
    private javax.swing.JTextArea resultsTextArea;
    // End of variables declaration//GEN-END:variables
}
